<?xml version="1.0"?>

<project name="mjc" default="jar">

    <description>Compiler for the MiniJava language</description>

    <!-- Settings  -->

    <property file="build.properties"/>

    <path id="project-classpath">
        <fileset dir="${lib-dir}">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement location="${main-classes-dir}"/>
        <pathelement location="${parser-classes-dir}"/>
        <pathelement location="${test-classes-dir}"/>
    </path>

    <!-- Internal Targets -->

    <target name="init">
        <mkdir dir="${parser-src-dir}"/>
        <uptodate property="parser-out-of-date" targetfile="${parser-grammar}">
            <srcfiles dir="${parser-src-dir}" includes="**/*.java"/>
        </uptodate>
    </target>

    <target name="generate-parser" if="parser-out-of-date" depends="init">
        <java jar="${lib-dir}/sablecc.jar" fork="true" failonerror="true">
            <arg value="-d"/>
            <arg value="${parser-src-dir}"/>
            <arg value="${parser-grammar}"/>
        </java>
    </target>

    <!-- Public Targets -->

    <target name="compile" description="Compile all sources" depends="generate-parser">

        <mkdir dir="${parser-classes-dir}"/>
        <javac srcdir="${parser-src-dir}"
               destdir="${parser-classes-dir}"
               classpathref="project-classpath"
               includeAntRuntime="false"
               debug="on"/>
        <copy todir="${parser-classes-dir}">
            <fileset dir="${parser-src-dir}" includes="**/*.dat"/>
        </copy>

        <mkdir dir="${main-classes-dir}"/>
        <javac srcdir="${main-src-dir}"
               destdir="${main-classes-dir}"
               classpathref="project-classpath"
               includeAntRuntime="false"
               debug="on"/>
        <copy todir="${main-classes-dir}">
            <fileset dir="${basedir}" includes="log4j.properties"/>
        </copy>

        <mkdir dir="${test-classes-dir}"/>
        <javac srcdir="${test-src-dir}"
               destdir="${test-classes-dir}"
               classpathref="project-classpath"
               includeAntRuntime="false"
               debug="on"/>
    </target>

    <target name="test" description="Run the unit tests" depends="compile">
        <mkdir dir="${test-reports-dir}"/>
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="project-classpath"/>
            <formatter type="plain"/>
            <batchtest fork="yes" todir="${test-reports-dir}">
                <fileset dir="${test-src-dir}" includes="**/*Test.java"/>
            </batchtest>
        </junit>
    </target>

    <target name="jar" description="Build compiler JAR file" depends="test">
        <jar destfile="${output-jar}">
            <fileset dir="${main-classes-dir}"/>
            <fileset dir="${parser-classes-dir}"/>
        </jar>
    </target>

    <target name="tar" description="Build compressed source-only TAR archive" depends="test">
        <fail message="Missing property tigris.id!" unless="tigris.id"/>
        <fail message="Missing property tigris.email!" unless="tigris.email"/>

        <!-- Prepare TAR file contents in a temporary directory -->
        <tempfile property="temp-dir"
                  destDir="${java.io.tmpdir}"
                  prefix="${ant.project.name}"/>
        <mkdir dir="${temp-dir}/${ant.project.name}"/>
        <copy todir="${temp-dir}/${ant.project.name}">
            <fileset dir="${basedir}" id="tar-fileset">
                <exclude name="**/${build-dir}/**"/>
                <exclude name="${output-jar}"/>
                <exclude name="${output-tar}"/>
                <exclude name="**/*.swp"/>
            </fileset>
        </copy>
        <replace file="${temp-dir}/${ant.project.name}/DESC"
                 token="@ID@"
                 value="${tigris.id}"/>
        <replace file="${temp-dir}/${ant.project.name}/DESC"
                 token="@EMAIL@"
                 value="${tigris.email}"/>

        <!-- Create compressed TAR file and print what we included -->
        <tar destfile="${output-tar}"
             basedir="${temp-dir}"
             compression="gzip"/>
        <pathconvert pathsep="${line.separator}  "
                     property="tar-fileset-formatted"
                     refid="tar-fileset"/>
        <echo message="Included files:"/>
        <echo message="  ${tar-fileset-formatted}"/>

        <delete dir="${temp-dir}"/>
    </target>

    <target name="clean" description="Delete all generated files">
        <delete dir="${build-dir}"/>
        <delete file="${output-jar}"/>
        <delete file="${output-tar}"/>
    </target>

</project>
