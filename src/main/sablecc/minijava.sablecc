/*
 * Grammar for the MiniJava language.
 *
 * This is a grammar for a slightly modified version of the MiniJava language [1].
 *
 * [1] http://www.csc.kth.se/utbildning/kth/kurser/DD2488/komp14/project/grammar14v1.pdf
 */

Package mjc;

Helpers

    unicode = [0 .. 0xffff];
    letter = ['a' .. 'z'] | ['A' .. 'Z'];
    digit = ['0' .. '9'];
    non_zero_digit = ['1' .. '9'];

    lf = 0x000a;
    cr = 0x000d;
    ht = 0x0009;
    ff = 0x000c;
    eol = lf | cr | cr lf;

    not_star = [unicode - '*'];
    not_star_not_slash = [unicode - ['*' + '/']];

    block_comment = '/*' not_star* ('*' (not_star_not_slash not_star*)?)* '*/';
    line_comment = '//' [unicode - [cr + lf]]* eol?;

Tokens

    // Keywords
    class_keyword = 'class';
    public_keyword = 'public';
    static_keyword = 'static';
    void_keyword = 'void';
    string_keyword = 'String';
    return_keyword = 'return';
    int_keyword = 'int';
    long_keyword = 'long';
    boolean_keyword = 'boolean';
    if_keyword = 'if';
    else_keyword = 'else';
    while_keyword = 'while';
    println_keyword = 'System.out.println';
    length_keyword = 'length';
    true_keyword = 'true';
    false_keyword = 'false';
    this_keyword = 'this';
    new_keyword = 'new';

    // Operators
    assign = '=';
    or = '||';
    and = '&&';
    equal = '==';
    not_equal = '!=';
    less_than = '<';
    greater_than = '>';
    less_equal_than = '<=';
    greater_equal_than = '>=';
    plus = '+';
    minus = '-';
    star = '*';
    not = '!';

    // Punctuation
    comma = ',';
    period = '.';
    semicolon = ';';

    // Bracketing
    lparen = '(';
    rparen = ')';
    lbrack = '[';
    rbrack = ']';
    lbrace = '{';
    rbrace = '}';

    // Miscellaneous
    comment = block_comment | line_comment;
    whitespace = (' ' | ht | ff | eol)+;
    identifier = letter (letter | digit | '_')*;
    integer = ('0' | non_zero_digit digit*);
    long = ('0' | non_zero_digit digit*) ('L' | 'l');

Ignored Tokens

    whitespace, comment;

Productions

    program =
        [main_class_declaration]:main_class_declaration [class_declarations]:class_declaration*
            {-> New program(main_class_declaration, [class_declarations])};

    main_class_declaration =
        class_keyword [name]:identifier
        [class_begin]:lbrace
            public_keyword static_keyword void_keyword [main_method_name]:identifier
                lparen string_keyword lbrack rbrack [arguments]:identifier rparen
            [method_begin]:lbrace
                [variable_declarations]:variable_declaration*
                [statements]:statement*
            [method_end]:rbrace
        [class_end]:rbrace
            {-> New main_class_declaration(name, main_method_name, arguments, [variable_declarations], [statements])};

    class_declaration =
        class_keyword [name]:identifier
        lbrace
            [field_declarations]:field_declaration*
            [method_declarations]:method_declaration*
        rbrace
            {-> New class_declaration(name, [field_declarations], [method_declarations])};

    method_declaration =
        public_keyword [return_type]:type [name]:identifier
            lparen [formal_parameters]:formal_parameter_list? rparen
        lbrace
            [variable_declarations]:variable_declaration*
            [statements]:statement*
            return_keyword [return_expression]:expression semicolon
        rbrace
            {-> New method_declaration(return_type, name, [formal_parameters.formal_parameter], [variable_declarations], [statements], return_expression)};

    field_declaration =
        [type]:type [name]:identifier semicolon
            {-> New field_declaration(type, name)};

    variable_declaration =
        [type]:type [name]:identifier semicolon
            {-> New variable_declaration(type, name)};

    formal_parameter =
        [type]:type [name]:identifier
            {-> New formal_parameter(type, name)};

    formal_parameter_list {-> formal_parameter* } =
        {formal_parameter} formal_parameter
            {-> [formal_parameter.formal_parameter] } |
        {formal_parameters} formal_parameter_list comma formal_parameter
            {-> [formal_parameter_list.formal_parameter, formal_parameter.formal_parameter] };

    type =
        {int} int_keyword
            {-> New type.int(int_keyword)} |
        {long} long_keyword
            {-> New type.long(long_keyword)} |
        {int_array} int_keyword lbrack rbrack
            {-> New type.int_array(int_keyword)} |
        {long_array} long_keyword lbrack rbrack
            {-> New type.long_array(long_keyword)} |
        {boolean} boolean_keyword
            {-> New type.boolean(boolean_keyword)} |
        {class} identifier
            {-> New type.class(identifier)};

    statement =
        {without_trailing_substatement} statement_without_trailing_substatement
            {-> statement_without_trailing_substatement.statement} |
        {if} if_keyword lparen [condition]:expression rparen [statement]:statement
            {-> New statement.if(if_keyword, condition, statement)} |
        {if_else}
            if_keyword lparen [condition]:expression rparen
                [then_statement]:statement_no_short_if
            else_keyword
                [else_statement]:statement
            {-> New statement.if_else(if_keyword, condition, then_statement.statement, else_keyword, else_statement)} |
        {while} while_keyword lparen [condition]:expression rparen [statement]:statement
            {-> New statement.while(while_keyword, condition, statement)};

    statement_no_short_if {-> statement} =
        {without_trailing_substatement} statement_without_trailing_substatement
            {-> statement_without_trailing_substatement.statement} |
        {if_else}
            if_keyword lparen [condition]:expression rparen
                [then_statement]:statement_no_short_if
            else_keyword
                [else_statement]:statement_no_short_if
            {-> New statement.if_else(if_keyword, condition, then_statement.statement, else_keyword, else_statement.statement)} |
        {while} while_keyword lparen [condition]:expression rparen [statement]:statement_no_short_if
            {-> New statement.while(while_keyword, condition, statement.statement)};

    statement_without_trailing_substatement {->statement} = 
        {block} lbrace [variable_declarations]:variable_declaration* [statements]:statement* rbrace
            {-> New statement.block([variable_declarations], [statements])} |
        {println} println_keyword lparen [value]:expression rparen semicolon
            {-> New statement.println(println_keyword, value)} |
        {assign} [variable]:identifier assign [value]:expression semicolon
            {-> New statement.assign(variable, assign, value)} |
        {array_assign} [variable]:identifier lbrack [index]:expression rbrack assign [value]:expression semicolon
            {-> New statement.array_assign(variable, index, assign, value)};

    expression =
        conditional_or_expression
            {-> conditional_or_expression.expression};

    expression_list {-> expression*} =
        {expression} expression
            {-> [expression.expression]} |
        {expressions} expression_list comma expression
            {-> [expression_list.expression, expression.expression]};

    conditional_or_expression {-> expression} =
        {and} conditional_and_expression
            {-> conditional_and_expression.expression} |
        {or} [left]:conditional_or_expression or [right]:conditional_and_expression
            {-> New expression.or(left.expression, or, right.expression)};

    conditional_and_expression {-> expression} =
        {comparative} comparative_expression
            {-> comparative_expression.expression} |
        {and} [left]:conditional_and_expression and [right]:comparative_expression
            {-> New expression.and(left.expression, and, right.expression)};

    comparative_expression {-> expression} =
        {relational} relational_expression
            {-> relational_expression.expression} |
        {equal} [left]:comparative_expression equal [right]:relational_expression
            {-> New expression.equal(left.expression, equal, right.expression)} |
        {not_equal} [left]:comparative_expression not_equal [right]:relational_expression
            {-> New expression.not_equal(left.expression, not_equal, right.expression)};

    relational_expression {-> expression} =
        {additive} additive_expression
            {-> additive_expression.expression } |
        {less_than} [left]:relational_expression less_than [right]:additive_expression
            {-> New expression.less_than(left.expression, less_than, right.expression)} |
        {greater_than} [left]:relational_expression greater_than [right]:additive_expression
            {-> New expression.greater_than(left.expression, greater_than, right.expression)} |
        {greater_equal_than} [left]:relational_expression greater_equal_than [right]:additive_expression
            {-> New expression.greater_equal_than(left.expression, greater_equal_than, right.expression)} |
        {less_equal_than} [left]:relational_expression less_equal_than [right]:additive_expression
            {-> New expression.less_equal_than(left.expression, less_equal_than, right.expression)};

    additive_expression {-> expression} =
        {multiplicative} multiplicative_expression
            {-> multiplicative_expression.expression} |
        {plus} [left]:additive_expression plus [right]:multiplicative_expression
            {-> New expression.plus(left.expression, plus, right.expression)} |
        {minus} [left]:additive_expression minus [right]:multiplicative_expression
            {-> New expression.minus(left.expression, minus, right.expression)};

    multiplicative_expression {-> expression} =
        {unary} unary_expression
            {-> unary_expression.expression} |
        {star} [left]:multiplicative_expression star [right]:unary_expression
            {-> New expression.times(left.expression, star, right.expression)};

    unary_expression {-> expression} =
        {primary} primary_expression
            {-> primary_expression.expression} |
        {negation} not primary_expression
            {-> New expression.not(not, primary_expression.expression)};

    method_invocation_expression {-> expression} =
        [instance]:primary_expression period [name]:identifier lparen [actual_parameters]:expression_list? rparen
            {-> New expression.method_invocation(instance.expression, name, [actual_parameters.expression])};

    array_access_expression {-> expression} =
        [array]:primary_no_array_creation_expression lbrack [index]:expression rbrack
            {-> New expression.array_access(array.expression, lbrack, index)};

    array_length_expression {-> expression} =
        [array]:primary_expression period length_keyword
            {-> New expression.array_length(array.expression, length_keyword)};

    class_instance_creation_expression {-> expression} =
        new_keyword [class_name]:identifier lparen rparen
            {-> New expression.new_instance(class_name)};

    array_creation_expression {-> expression} =
        {new_int_array} new_keyword int_keyword lbrack [size]:expression rbrack
            {-> New expression.new_int_array(new_keyword, size)} |
        {new_long_array} new_keyword long_keyword lbrack [size]:expression rbrack
            {-> New expression.new_long_array(new_keyword, size)};

    primary_expression {-> expression} =
        {array} array_creation_expression
            {-> array_creation_expression.expression} |
        {primary} primary_no_array_creation_expression
            {-> primary_no_array_creation_expression.expression};

    primary_no_array_creation_expression {-> expression} =
        {literal} literal_expression
            {-> literal_expression.expression} |
        {identifier} identifier
            {-> New expression.identifier(identifier)} |
        {this} this_keyword
            {-> New expression.this(this_keyword)} |
        {instance} class_instance_creation_expression
            {-> class_instance_creation_expression.expression} |
        {array_length} array_length_expression
            {-> array_length_expression.expression} |
        {array_access} array_access_expression
            {-> array_access_expression.expression} |
        {method} method_invocation_expression
            {-> method_invocation_expression.expression} |
        {expression} lparen expression rparen
            {-> expression.expression};

    literal_expression {-> expression} =
        {integer} integer
            {-> New expression.integer(integer)} |
        {long} long
            {-> New expression.long(long)} |
        {true} true_keyword
            {-> New expression.true(true_keyword)} |
        {false} false_keyword
            {-> New expression.false(false_keyword)};


Abstract Syntax Tree

    program =
        main_class_declaration [class_declarations]:class_declaration*;

    main_class_declaration =
        [name]:identifier
        [main_method_name]:identifier
        [arguments]:identifier
        [local_variables]:variable_declaration*
        [statements]:statement*;

    class_declaration =
        [name]:identifier
        [field_declarations]:field_declaration*
        [method_declarations]:method_declaration*;

    method_declaration =
        [return_type]:type
        [name]:identifier
        [formal_parameters]:formal_parameter*
        [variable_declarations]:variable_declaration*
        [statements]:statement*
        [return_expression]:expression;

    field_declaration =
        [type]:type
        [name]:identifier;

    variable_declaration =
        [type]:type
        [name]:identifier;

    formal_parameter =
        [type]:type
        [name]:identifier;

    type =
        {int} [name]:int_keyword |
        {long} [name]:long_keyword |
        {int_array} [name]:int_keyword |
        {long_array} [name]:long_keyword |
        {boolean} [name]:boolean_keyword |
        {class} [name]:identifier;

    statement =
        {block} [variable_declarations]:variable_declaration* [statements]:statement* |
        {if} if_keyword [condition]:expression [statement]:statement |
        {if_else} if_keyword [condition]:expression [then_statement]:statement else_keyword [else_statement]:statement |
        {while} while_keyword [condition]:expression [statement]:statement |
        {println} println_keyword [value]:expression |
        {assign} [variable]:identifier assign [value]:expression |
        {array_assign} [variable]:identifier [index]:expression assign [value]:expression;

    expression =
        {and} [left]:expression and [right]:expression |
        {or} [left]:expression or [right]:expression |
        {less_than} [left]:expression less_than [right]:expression |
        {greater_than} [left]:expression greater_than [right]:expression |
        {greater_equal_than} [left]:expression greater_equal_than [right]:expression |
        {less_equal_than} [left]:expression less_equal_than [right]:expression |
        {equal} [left]:expression equal [right]:expression |
        {not_equal} [left]:expression not_equal [right]:expression |
        {plus} [left]:expression plus [right]:expression |
        {minus} [left]:expression minus [right]:expression |
        {times} [left]:expression star [right]:expression |
        {not} not [expression]:expression |
        {method_invocation} [instance]:expression [name]:identifier [actual_parameters]:expression* |
        {array_access} [array]:expression [start_bracket]:lbrack [index]:expression |
        {array_length} [array]:expression length_keyword |
        {new_instance} [class_name]:identifier |
        {new_int_array} new_keyword [size]:expression |
        {new_long_array} new_keyword [size]:expression |
        {integer} integer |
        {long} long |
        {true} true_keyword |
        {false} false_keyword |
        {identifier} identifier |
        {this} this_keyword;

